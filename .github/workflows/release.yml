name: Release npm package

on:
  push:
    branches:
      - main

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

# Add permissions for gh release to create a release
permissions:
  contents: write

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the code with full history
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch all history for all tags and branches for versioning
          fetch-depth: 0

      # Step 2: Set up Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          registry-url: 'https://registry.npmjs.org'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: yarn --pure-lockfile

      # Step 4: Build the project
      - name: Build project
        run: yarn run build

      # Step 5: Configure Git user
      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      # Step 6: Conditionally bump version, tag, and push
      - name: Bump version based on commit message
        id: versioning
        run: |
          # Get the latest commit message
          commit_message="${{ github.event.head_commit.message }}"
          echo "Last commit message: $commit_message"

          # Determine version type
          # If commit message starts with 'feat' or 'perf', it's a 'minor' release
          # Otherwise, it's a 'patch'
          if echo "$commit_message" | grep -q -E '^(feat|perf)'; then
            version_type="minor"
            echo "Bumping minor version."
          else
            version_type="patch"
            echo "Bumping patch version."
          fi

          # Bump the version using npm, which also creates a git commit and tag
          new_version=$(npm version $version_type)
          echo "New version: $new_version"

          # Set the new version as an output for other steps
          echo "NEW_VERSION=$new_version" >> $GITHUB_OUTPUT

          # Push the new commit and tag to the repository
          git push
          git push --tags

      # Step 7: Publish the package to the npm registry
      - name: Publish to npm
        run: npm publish --access public
        env:
          # Use NODE_AUTH_TOKEN with setup-node's registry-url
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Step 8: Create a GitHub Release
      - name: Create GitHub Release
        run: gh release create ${{ steps.versioning.outputs.NEW_VERSION }} --generate-notes
        env:
          # The GITHUB_TOKEN is automatically provided by GitHub Actions
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
