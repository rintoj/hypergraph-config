name: Release npm package

on:
  push:
    branches:
      - main

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the code with full git history
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Set up Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          registry-url: 'https://registry.npmjs.org' # Important for npm publish

      # Step 3: Install dependencies
      - name: Install dependencies
        run: yarn --pure-lockfile

      # Step 4: Build the project (if necessary)
      - name: Build project
        run: yarn run build

      # Step 5: Configure Git user
      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      # Step 6: Determine version and create local commit & tag
      - name: Determine Version and Bump Locally
        id: versioning
        run: |
          # Get the latest commit message to determine version type
          commit_message="${{ github.event.head_commit.message }}"
          echo "Last commit message: $commit_message"

          # Default to 'patch' unless the commit is a 'feat' or 'perf'
          if echo "$commit_message" | grep -q -E '^(feat|perf)'; then
            version_type="minor"
            echo "Commit type warrants a MINOR version bump."
          else
            version_type="patch"
            echo "Commit type warrants a PATCH version bump."
          fi

          # Bump the version using npm. This command updates package.json
          # and creates a new git commit and tag LOCALLY.
          new_version=$(npm version $version_type)
          echo "Bumped version to: $new_version"

          # Set the new version as an output for subsequent steps
          echo "NEW_VERSION=$new_version" >> $GITHUB_OUTPUT

      # Step 7: Publish to npm registry (The Gate)
      # This step acts as a gate. If it fails, the following steps will not run.
      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Step 8: Push the new commit and tag to the repository
      # This step only runs if 'npm publish' was successful.
      - name: Push Changes to Repository
        run: git push --follow-tags

      # Step 9: Create a GitHub Release
      # This step also only runs if 'npm publish' was successful.
      - name: Create GitHub Release
        run: gh release create ${{ steps.versioning.outputs.NEW_VERSION }} --generate-notes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
